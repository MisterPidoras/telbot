import asyncio
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command, ChatMemberUpdatedFilter, JOIN_TRANSITION, CommandStart
from aiogram.types import ContentType, Message, ChatMemberUpdated
from aiogram.client.default import DefaultBotProperties

TOKEN = ""
ADMIN_IDS = [728594122, 7898080464] 
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
bot.my_admins_list = ADMIN_IDS

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp = Dispatcher()
user_group_router = Router()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
class ChatTypeFilter:
    def __init__(self, chat_types: list[str]) -> None:
        self.chat_types = chat_types

    async def __call__(self, message: types.Message) -> bool:
        return message.chat.type in self.chat_types

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ä–æ—É—Ç–µ—Ä–∞–º
user_group_router.message.filter(ChatTypeFilter(["group", "supergroup"]))
user_group_router.edited_message.filter(ChatTypeFilter(["group", "supergroup"]))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
@user_group_router.chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def new_member(event: ChatMemberUpdated, bot: Bot):
    user = event.new_chat_member.user
    chat = event.chat

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º (–±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–µ)
    for admin_id in bot.my_admins_list:
        try:
            username_text = f"@{user.username}" if user.username else "‚ùå –ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
            await bot.send_message(
                chat_id=admin_id,
                text=f"üîî –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≥—Ä—É–ø–ø–µ <b>{chat.title}</b>:\n"
                     f"üë§ –ò–º—è: <a href='tg://user?id={user.id}'>{user.full_name}</a>\n"
                     f"üÜî ID: <code>{user.id}</code>\n"
                     f"üìå –Æ–∑–µ—Ä–Ω–µ–π–º: {username_text}",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")


async def main():
    dp.include_router(user_group_router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
